-- Sincrono ou asincrono

O sistema Sincrono é o padrão do javascript ou seja uma tarefa é concluida atraz da outra.

Mas há possibilidade de criar um sistema assincrono onde , há tarefas sendo executadas em segundo plano.

A assincronicidade em programação é o ato de executar uma tarefa em “segundo plano”, para a execução das
outras tarefas menores acontecerem enquanto a maior está sendo carregada, sem interromper o código.

Por traz do javascript ele se comporta seguindo 3 etapas

-- Task Queue
-- Call stack
-- Event loop

Even loop --> Serve para selecionar quem deve ser executado primeiro e manda para a função Task Queue

Task Queue --> são para selecionar as prioridades que no caso são os códigos que devem ser executados 
               primeiro. Fila das tarefas assincrona

Exemplo:

function mandarMensagem() {
    console.log(“Estou aprendendo a programar.”);
}

console.log(“O javascript é legal.”);
mandarMensagem();

console.log(“Eu gosto de HTML e CSS.”);

------------------------------------------------------------------------------------------------------

Com o event loop reproduzindo esse código através do empilhamento de ações na call stack, 
qual será a ordem que poderemos visualizar essas frases no console?

Resposta : **********

O javascript é legal.

Estou aprendendo a programar.

Eu gosto de HTML e CSS.

========================================================================================================

-- O que são Callback?

Callback são funções que são enviadas como parâmetros para outras funções.

Elas servem como tempo de espera para a execução da função.

**Nota --

Callbacks são assíncronos, portanto são funções que são ativadas por algum fator 
pré-determinado, podendo ser um tempo específico, a partir de uma ação do usuário, 
depois da conclusão de alguma coisa


-- SOBRE API

API significa Interface de programação de aplicações, ela fica entre o cliente e servidor fazendo a 
intermediação de serviço.
API é uma forma de fornecer acesso a algum serviço.


-- METODO FETCH

Ele é o metodo assincrono que ele tem como parâmetro uma url de uma API. 

Passo a passo da requisição para API

1 -- Usar o método FETCH;
2 -- Fazer a conversão para JSON;
3 -- Imprimir no consolo com THEN;
4 -- Tratar o erro com o catch -- pegar

*******************************************************************************************************************

-- PROMISE

Esse termo se refere a uma promessa de que uma coisa vai acontecer e o retorno dela pode ser que seja:

-- Resolvida --> THEN

-- Rejeitada --> catch

-- finally --> fim da requisição

Uma PROMISE sempre retorna um objeto que é possível ser acessada com THEN() --> então e dentro desse 
parentese é feita a conversão para JSON que retornara um object

-- Metodo catch

Serve para tratar erros

Exemplo:

.catch(erro => console.log(erro)) --> 


************************************************************************************************************************

Sobre arrow function: https://youtu.be/3EkS9-P3cIM

Uma arrow function precisa ser criada dentro de uma cosntante se precisar chamer ela, pois ela por padrão é anônima
e não pode ser chamada

const numero = () => {
    return console.log("Exemplo aqui!!")
}

************************************************************************************************************************


